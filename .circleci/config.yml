version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
jobs:
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [node_modules]
      - run:
          name: Build app
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [node_modules]
          key: node_modules
  lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [node_modules]
      - run:
          name: lint app
          command: |
            npm install
            npm run lint
  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [node_modules]
      - run:
          name: test app
          command: |
            npm install
            npm run test
  pushToDockerhub:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: $username
          password: $password
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: push to docker hub
          command: |
            chmod +x upload_docker.sh
            docker build --tag=essameid614/udacity_nanodegree_capstone:latest .
            ./upload_docker.sh

  create-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: deployment-${CIRCLE_WORKFLOW_ID:0:7}
          node-type: t2.small
          ssh-access: true
          nodes: 1
          nodegroup-name: ng-${CIRCLE_WORKFLOW_ID:0:7}
          external-dns-access: true
          show-eksctl-command: true
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: deployment-${CIRCLE_WORKFLOW_ID:0:7}
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: k8s.yaml
      - run:
          name: forward port
          command: |
            kubectl wait deployment green-deployment --for condition=Available=True --timeout=90s
            kubectl expose deployment green-deployment --type=LoadBalancer --name=exposing-service  
  delete-old-deployment:
    docker:
      - image: 'cimg/aws:2022.06'
    steps:
      - checkout
      - run:
          name: get previous deployment url
          command: |
            oldDeploymentId=$(curl https://kvdb.io/HEQp43YFYGj56DGfK6G1T4/last_deployment_id --insecure)
            export OLD_DEPLOYMENT_ID=$oldDeploymentId
            echo $OLD_DEPLOYMENT_ID
            if [ "$OLD_DEPLOYMENT_ID" != "Not Found" ]; 
            then
            echo "found an old deployment"
            aws cloudformation delete-stack --stack-name "eksctl-deployment-${OLD_DEPLOYMENT_ID}-nodegroup-ng-${OLD_DEPLOYMENT_ID}"
            aws cloudformation delete-stack --stack-name "eksctl-deployment-${OLD_DEPLOYMENT_ID}-cluster"
            else
            echo "didnt find an old deployment"
            circleci-agent step halt
            fi

  delete-old-kubernetes-cluster:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - checkout
      - run:
          name: get previous deployment url
          command: |
            oldDeploymentId=$(curl https://kvdb.io/HEQp43YFYGj56DGfK6G1T4/last_deployment_id --insecure)
            export OLD_DEPLOYMENT_ID=$oldDeploymentId
            echo $OLD_DEPLOYMENT_ID
            if [ "$OLD_DEPLOYMENT_ID" == "Not Found" ]; 
            then
            circleci-agent step halt
            fi
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl delete cluster --name deployment-${OLD_DEPLOYMENT_ID} 
  
  save-to-kvdb:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - run:
          name: save workflowId
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            curl https://kvdb.io/HEQp43YFYGj56DGfK6G1T4/last_deployment_id -d "${CIRCLE_WORKFLOW_ID:0:7}" --insecure

workflows:
  default:
    jobs:
      - build
      - test:
          requires: [build]
      - lint:
          requires: [build]
      - pushToDockerhub:
          context: docker-context
          requires: [test, lint]
      - create-deployment:
          cluster-name: deployment-${CIRCLE_WORKFLOW_ID:0:7}
          requires: [pushToDockerhub]
      - aws-eks/update-container-image:
          cluster-name: deployment-${CIRCLE_WORKFLOW_ID:0:7}
          resource-name: deployment/green-deployment
          container-image-updates: 'green-deployment=essameid614/udacity_nanodegree_capstone:latest'
          requires:
            - create-deployment
      - hold:
          requires:
            - aws-eks/update-container-image
          type: approval
      - delete-old-deployment:
          requires:
            - hold
      
      - delete-old-kubernetes-cluster:
          requires:
            - delete-old-deployment
      
      - save-to-kvdb:
          requires:
            - delete-old-kubernetes-cluster