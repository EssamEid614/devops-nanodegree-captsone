version: 2.1
orbs: 
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
jobs:
  build:    
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [node_modules]
      - run:
          name: Build app
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [node_modules]
          key: node_modules
  lint:    
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [node_modules]
      - run:
          name: lint app
          command: |
            npm install
            npm run lint
  test:    
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [node_modules]
      - run:
          name: test app
          command: |
            npm install
            npm run test
  pushToDockerhub:    
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: $username
          password: $password
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: push to docker hub
          command: |
            chmod +x upload_docker.sh
            docker build --tag=essameid614/udacity_nanodegree_capstone:latest .
            ./upload_docker.sh
  create-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: green-deployment-1
          install-kubectl: true
      - aws-eks/create-cluster:
          cluster-name: green-deployment-1
          node-type: t2.micro
          ssh-access: true
          nodes: 1
          external-dns-access: true
          show-eksctl-command: true
      - kubernetes/create-or-update-resource:
          resource-file-path: k8s.yaml
#get old eks cluster id
#create the eks cluster 
#deploy the app to the eks cluster 
#delete old eks cluster 

workflows:
  default:
    jobs:
      - build
      - test:
          requires: [build]
      - lint:
          requires: [build]
      - pushToDockerhub:
          context: docker-context
          requires: [test, lint]
      # - aws-eks/create-cluster:
      #     cluster-name: green-deployment-1
      # - create-deployment:
      #     cluster-name: green-deployment-1
          # requires:
          #   - aws-eks/create-cluster
      - aws-eks/update-container-image:
          cluster-name: green-deployment-1
          resource-name: deployment/green-deployment
          container-image-updates: 'green-deployment=essameid614/udacity_nanodegree_capstone:latest'
          # requires:
          #   - create-deployment